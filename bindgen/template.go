package main

// Don't edit this file. 

var tmpl = `// Code generated by bindgen, DO NOT EDIT.

package {{.package}}

import "github.com/newalchemylimited/seth"

{{range $c := .contracts}}

	type {{$c.Name}} struct {
		addr  *seth.Address
		s     *seth.Sender
	}

	func New{{$c.Name}}(addr *seth.Address, sender *seth.Sender) *{{$c.Name}} {
		return &{{$c.Name}}{addr: addr, s: sender}
	}

	{{range $d := $c.ABI}}
		
		{{if eq $d.Type "function" }}

			{{if $d.Constant}}

				// {{FuncName $d.Name}} calls the solidity view {{$c.Name}}.{{$d.Signature}}
				func (c *{{$c.Name}}) {{FuncName $d.Name}}({{range $i, $input := $d.Inputs}}{{if gt $i 0}}, {{end}}{{ArgName $input.Name}} {{ArgType $input.Type}}{{end}}) ({{range $i, $output := $d.Outputs}}{{ArgName $output.Name}} {{RetType $output.Type}}, {{end}}err error) {
					d := seth.NewABIDecoder({{range $i, $output := $d.Outputs}}{{if gt $i 0}}, {{end}}&{{ArgName $output.Name}}{{end}})
					err = c.s.ConstCall(c.addr, "{{$d.Signature}}", d{{range $i, $input := $d.Inputs}}, {{ArgName $input.Name}}{{end}})
					return
				}
			
			{{else}}

				// {{FuncName $d.Name}} calls the solidity function {{$c.Name}}.{{$d.Signature}}
				func (c *{{$c.Name}}) {{FuncName $d.Name}}({{range $i, $input := $d.Inputs}}{{if gt $i 0}}, {{end}}{{ArgName $input.Name}} {{ArgType $input.Type}}{{end}}) (res seth.Hash, err error) {
					return c.s.Send(c.addr, "{{$d.Signature}}"{{range $i, $input := $d.Inputs}}, {{ArgName $input.Name}}{{end}})
				}

			{{end}}

		{{end}}

	{{end}}
	

{{end}}


{{range $c := .contracts}}

	var {{$c.Name}}Code = {{CodeVar $c.Code}}

{{end}}`
